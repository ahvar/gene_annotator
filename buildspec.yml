version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: "us-east-1"
    REPO_URI: "001570960384.dkr.ecr.us-east-1.amazonaws.com/gene-annotator"

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPO_URI
      
      # Extract first 5 chars of build ID
      - BUILD_SHORT=$(echo ${CODEBUILD_BUILD_ID} | cut -c1-5)
      
      # Parse branch name from source version
      - |
        # Print all relevant environment variables for debugging
        echo "CODEBUILD_WEBHOOK_HEAD_REF=$CODEBUILD_WEBHOOK_HEAD_REF"
        echo "CODEBUILD_SOURCE_VERSION=$CODEBUILD_SOURCE_VERSION"
        echo "CODEBUILD_WEBHOOK_BASE_REF=$CODEBUILD_WEBHOOK_BASE_REF"
        echo "CODEBUILD_WEBHOOK_EVENT=$CODEBUILD_WEBHOOK_EVENT"
        echo "BUILD_SHORT=$BUILD_SHORT"
        
        # Improved branch detection
        if [[ -n "$CODEBUILD_WEBHOOK_HEAD_REF" && "$CODEBUILD_WEBHOOK_HEAD_REF" == refs/heads/* ]]; then
          # Extract branch name from refs/heads/...
          BRANCH_NAME=$(echo $CODEBUILD_WEBHOOK_HEAD_REF | sed 's|refs/heads/||')
        elif [[ -n "$CODEBUILD_GIT_BRANCH" ]]; then
          # Use CODEBUILD_GIT_BRANCH if available
          BRANCH_NAME=$CODEBUILD_GIT_BRANCH
        else
          # Fallback to source version
          BRANCH_NAME=$CODEBUILD_SOURCE_VERSION
        fi
        
        # Trim whitespace
        BRANCH_NAME=$(echo "$BRANCH_NAME" | xargs)
        
        echo "Detected branch name: '$BRANCH_NAME'"
        
        # Handle different branch patterns with more explicit condition checks
        if [[ "$BRANCH_NAME" == feature/* ]]; then
          echo "Matched feature branch pattern"
          FEATURE_NAME=$(echo $BRANCH_NAME | awk -F'/' '{print $NF}')
          TAG="${FEATURE_NAME}-${BUILD_SHORT}"
          
        elif [[ "$BRANCH_NAME" == "develop" ]]; then
          echo "Matched develop branch pattern"
          TAG="develop-${BUILD_SHORT}"
          
        elif [[ "$BRANCH_NAME" == "main" ]]; then
          echo "Matched main branch pattern"
          TAG="main-${BUILD_SHORT}"
          
        elif [[ "$BRANCH_NAME" == release/* ]]; then
          echo "Matched release branch pattern"
          SEMVER=$(echo $BRANCH_NAME | sed 's|release/||')
          TAG="${SEMVER}-${BUILD_SHORT}"
          RELEASE_TAG="${SEMVER}"
          IS_RELEASE=true
          
        else
          echo "No pattern matched, using default"
          TAG="build-${BUILD_SHORT}"
        fi
        
        # Ensure tag is valid for Docker (alphanumeric, underscore, hyphen only)
        TAG=$(echo $TAG | sed 's/[^a-zA-Z0-9_.-]/-/g')
        
        echo "Using tag: $TAG"
      
  build:
    commands:
      - echo "Building the Docker image..."
      - docker build -f Dockerfile -t $REPO_URI:$TAG .
      - docker tag $REPO_URI:$TAG $REPO_URI:latest
      
      # If it's a release branch, also create the release tag
      - |
        if [[ "$IS_RELEASE" == "true" ]]; then
          echo "Creating release tag $RELEASE_TAG"
          docker tag $REPO_URI:$TAG $REPO_URI:$RELEASE_TAG
        fi
  
  post_build:
    commands:
      - echo "Pushing Docker images..."
      - docker push $REPO_URI:$TAG
      - docker push $REPO_URI:latest
      
      # If it's a release branch, also push the release tag
      - |
        if [[ "$IS_RELEASE" == "true" ]]; then
          echo "Pushing release tag $RELEASE_TAG"
          docker push $REPO_URI:$RELEASE_TAG
        fi
      
      - echo "Writing imagedefinitions.json for ECS Deployâ€¦"
      # Use the appropriate tag for the deployment
      - |
        if [[ "$IS_RELEASE" == "true" && "$CODEBUILD_WEBHOOK_TRIGGER" == "release" ]]; then
          # In prod environment, use the semver tag
          printf '[{"name":"gene-annotator","imageUri":"%s"}]' $REPO_URI:$RELEASE_TAG > imagedefinitions.json
        else
          # In lower environments, use the build-specific tag
          printf '[{"name":"gene-annotator","imageUri":"%s"}]' $REPO_URI:$TAG > imagedefinitions.json
        fi

artifacts:
  files:
    - imagedefinitions.json