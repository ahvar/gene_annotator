version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    REPO_URI: 001570960384.dkr.ecr.us-east-1.amazonaws.com/gene-annotator

phases:
  pre_build:
    commands:
      - |
        echo "Logging in to Amazon ECR..."
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPO_URI

        # Grab the repo name (for later deletes/scans)
        REPO_NAME=${REPO_URI#*/}

        # Short build ID (first 5 chars of the part after the colon)
        RAW_ID=${CODEBUILD_BUILD_ID##*:}
        SHORT_ID=${RAW_ID:0:5}
        
        # Figure out the branch from CodePipeline
        # CODEBUILD_SOURCE_VERSION is like "refs/heads/develop"
        BRANCH_NAME=${CODEBUILD_SOURCE_VERSION#refs/heads/}
        echo Detected branch: $BRANCH_NAME

        # Compute TAG (+ optional RELEASE_TAG)
        if [[ "$BRANCH_NAME" == feature/* ]]; then
          FEATURE=${BRANCH_NAME##*/}
          TAG="${FEATURE}-${SHORT_ID}"
        elif [[ "$BRANCH_NAME" == develop ]]; then
          TAG="develop-${SHORT_ID}"
        elif [[ "$BRANCH_NAME" == main ]]; then
          TAG="main-${SHORT_ID}"
        elif [[ "$BRANCH_NAME" == release/* ]]; then
          SEMVER=${BRANCH_NAME#release/}
          TAG="${SEMVER}-${SHORT_ID}"
          RELEASE_TAG=${SEMVER}
          IS_RELEASE=true
        else
          TAG="build-${SHORT_ID}"
        fi

        # Sanitize: only allow alphanumerics, ., _, or -
        TAG=${TAG//[^a-zA-Z0-9_.-]/-}
        echo Using image tag: $TAG
  build:
    commands:
      - |
        echo "Building the Docker image..."
        # Pick the right Dockerfile
        if [[ -f Dockerfile ]]; then
          DOCKERFILE_PATH=Dockerfile
        elif [[ -f containers/Dockerfile ]]; then
          DOCKERFILE_PATH=containers/Dockerfile
        else
          echo "ERROR: No Dockerfile found"
          exit 1
        fi

        docker build -f $DOCKERFILE_PATH -t $REPO_URI:$TAG .
        docker tag $REPO_URI:$TAG $REPO_URI:latest

        echo Successfully built image $REPO_URI:$TAG
        if [[ "$IS_RELEASE" == "true" ]]; then
          echo "Creating release tag $RELEASE_TAG"
          docker tag $REPO_URI:$TAG $REPO_URI:$RELEASE_TAG
        fi
  post_build:
    commands:
      - |
        echo "Pushing Docker images..."
        docker push $REPO_URI:$TAG

        echo "Deleting existing latest tag if it exists"
        aws ecr batch-delete-image --repository-name $REPO_NAME --image-ids imageTag=latest || true
        docker push $REPO_URI:latest

        if [[ "$IS_RELEASE" == "true" ]]; then
          echo "Pushing release tag $RELEASE_TAG"
          docker push $REPO_URI:$RELEASE_TAG
        fi

        aws ecr start-image-scan --repository-name $REPO_NAME --image-id imageTag=$TAG || true

        echo "Writing imagedefinitions.json for ECS Deploy..."
        if [[ "$IS_RELEASE" == "true" ]]; then
          printf '[{"name":"gene-annotator","imageUri":"%s"}]' $REPO_URI:$RELEASE_TAG > imagedefinitions.json
        else
          printf '[{"name":"gene-annotator","imageUri":"%s"}]' $REPO_URI:$TAG > imagedefinitions.json
        fi

artifacts:
  files:
    - imagedefinitions.json
