version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    REPO_URI: 001570960384.dkr.ecr.us-east-1.amazonaws.com/gene-annotator
    BINFMT_URI: 001570960384.dkr.ecr.us-east-1.amazonaws.com/ci-binfmt:latest

phases:
  pre_build:
    commands:
      - |
        set -euxo pipefail
        echo "== branch -> tag =="
        if [[ -n "$BRANCH_NAME" ]]; then
          BRANCH="$BRANCH_NAME"
        elif [[ "$CODEBUILD_SOURCE_VERSION" == refs/heads/* ]]; then
          BRANCH="${CODEBUILD_SOURCE_VERSION#refs/heads/}"
        else
          BRANCH=""
        fi

        # --------- sanitize accidental shell quotes that result from overriding environment variables in CodePipeline ---- #
        BRANCH=${BRANCH#\"}; BRANCH=${BRANCH%\"}
        BRANCH=${BRANCH#\'}; BRANCH=${BRANCH%\'}

        RAW_ID=${CODEBUILD_BUILD_ID##*:}
        SHORT_ID=${RAW_ID:0:5}
        IS_RELEASE=false
        case "$BRANCH" in
          develop)        TAG="develop-${SHORT_ID}" ;;
          main)           TAG="main-${SHORT_ID}" ;;
          feature/*)      TAG="${BRANCH##*/}-${SHORT_ID}" ;;
          release/*)
            SEMVER=${BRANCH#release/}
            TAG="${SEMVER}-${SHORT_ID}"
            RELEASE_TAG="$SEMVER"
            IS_RELEASE=true
            ;;
          *)              TAG="build-${SHORT_ID}" ;;
        esac
        echo "Image tag will be '$TAG'"
        export TAG IS_RELEASE RELEASE_TAG BRANCH

        # ------------------------- ECR Login ------------------------------------------
        ACCOUNT_REGISTRY="${REPO_URI%%/*}" # <acct>.dkr.ecr.<region>.amazonaws.com
        aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$ACCOUNT_REGISTRY"
        # ------------------------------------------------------------------------------
        
        # ------------------- Enable buildx for ARM cross-build ------------------------
        docker buildx install
        docker run --privileged --rm "$BINFMT_URI" --install all
        docker buildx create --name arm --use
        # ------------------------------------------------------------------------------

        # remove illegal tag chars
        TAG=${TAG//[^a-zA-Z0-9_.-]/-}
        echo "Using image tag: '$TAG'"

  build:
    commands:
      - |
        set -euxo pipefail
        DOCKERFILE_PATH=$(test -f Dockerfile && echo Dockerfile || echo containers/Dockerfile)

        #############################################
        # 1  Build & push the unique, immutable tag
        #############################################
        docker buildx build --platform linux/arm64 -f "$DOCKERFILE_PATH" -t "$REPO_URI:$TAG" --push .

        #######################################################
        # 2  If this is main or a release, recycle the 'latest'
        #   (and semver) tags without breaking immutability
        #######################################################
        if [[ "$BRANCH" == "main" || "$IS_RELEASE" == "true" ]]; then
          echo "Deleting any existing :latest image to satisfy tag‑immutability…"
          aws ecr batch-delete-image --repository-name "${REPO_URI#*/}" --image-ids imageTag=latest || true
        
          # Wait until ECR confirms :latest is really gone (eventual consistency)
          # problem with this earlier where latest still in ECR causes main and release builds to fail
          while aws ecr describe-images --repository-name "${REPO_URI#*/}" --image-ids imageTag=latest --query 'imageDetails[0]' --output text 2>/dev/null; do
            echo "  …still deleting, waiting 3 s"; sleep 3
          done
          echo ":latest removed"

          # Pull the manifest for the *fresh* image we just pushed
          MANIFEST=$(aws ecr batch-get-image --repository-name "${REPO_URI#*/}" --image-ids imageTag="$TAG" --query 'images[0].imageManifest' --output text)

          # Re‑tag the same digest as :latest (and <semver>)
          aws ecr put-image --repository-name "${REPO_URI#*/}" --image-manifest "$MANIFEST" --image-tag latest

          if [[ "$IS_RELEASE" == "true" ]]; then
            aws ecr put-image --repository-name "${REPO_URI#*/}" --image-manifest "$MANIFEST" --image-tag "$RELEASE_TAG"
          fi
        fi

  post_build:
    commands:
      - |
        set -euo pipefail
        aws ecr start-image-scan --repository-name "${REPO_URI#*/}" --image-id imageTag="$TAG" || true
        printf '[{"name":"gene-annotator","imageUri":"%s"}]' "$REPO_URI:$TAG" > imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
